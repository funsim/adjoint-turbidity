#!/bin/bash
export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}
export SRC_DIR=~
export DOLFIN_ADJOINT_VERSION=d9d3d28632c56e9a68b48f73e2a622a5077b918c
export LIBADJOINT_VERSION=3a99e45533d1ecb3a828c8072d22067d0a66d5b0
export FENICS_PYTHON_MAJOR_VERSION=2

pull_dolfin-adjoint () {
    echo "FENICS-BUILDER: Pulling dolfin-adjoint..."
    cd $SRC_DIR
    if [ -d dolfin-adjoint ]
    then
	    cd dolfin-adjoint
       	git pull
    else
	    git clone https://bitbucket.org/dolfin-adjoint/dolfin-adjoint.git
	    cd dolfin-adjoint
        git checkout ${DOLFIN_ADJOINT_VERSION}
    fi
}
build_dolfin-adjoint () {
    echo "FENICS-BUILDER: Building dolfin-adjoint..."
    if [ -d $SRC_DIR/dolfin-adjoint ]
    then
	    cd $SRC_DIR/dolfin-adjoint
	    python${FENICS_PYTHON_MAJOR_VERSION} setup.py install
    else
	    echo "FENICS-BUILDER: dolfin-adjoint source cannot be found. Please run pull_dolfin-adjoint first."
    fi
}
update_dolfin-adjoint () {
    pull_dolfin-adjoint
    build_dolfin-adjoint
}

pull_libadjoint () {
    echo "FENICS-BUILDER: Updating libadjoint..."
    cd $SRC_DIR
    if [ -d libadjoint ];
    then
	    cd libadjoint
	    git pull
    else
	    git clone https://bitbucket.org/dolfin-adjoint/libadjoint.git
	    cd libadjoint
        git checkout ${LIBADJOINT_VERSION}
    fi
}
build_libadjoint () {
    echo "FENICS-BUILDER: Building libadjoint..."
    if [ -d $SRC_DIR/libadjoint ]
    then
    	cd $SRC_DIR/libadjoint
	    mkdir -p build
    	cd build
    	cmake ../ -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python${FENICS_PYTHON_MAJOR_VERSION} -Wno-dev
    	make
    	make install
    else
	    echo "FENICS-BUILDER: libadjoint source cannot be found. Please run pull_libadjoint first."
    fi
}
update_libadjoint () {
    pull_libadjoint
    build_libadjoint
}
pull_ipopt () {
    echo "FENICS-BUILDER: Updating ipopt..."
    cd $SRC_DIR
    rm -fR ipopt
    mkdir ipopt
    cd ipopt
    curl -O http://www.coin-or.org/download/source/Ipopt/Ipopt-${IPOPT_VER}.tgz
    tar -xvf Ipopt-${IPOPT_VER}.tgz
    cd Ipopt-$IPOPT_VER
    cd ThirdParty/Metis
    bash ./get.Metis
}

build_ipopt () {
    echo "FENICS-BUILDER: Building ipopt..."
    # install ipopt with metis and mumps, still need HSL :
    cd $SRC_DIR/ipopt/Ipopt-$IPOPT_VER

    # Fix compilation for parallel MPI versions
    sed -i "s/#define MPI_COMM_WORLD IPOPT_MPI_COMM_WORLD//g" Ipopt/src/Algorithm/LinearSolvers/IpMumpsSolverInterface.cpp
    #sed -i "s/MPI_COMM_WORLD/MPI_COMM_SELF/g" Ipopt/src/Algorithm/LinearSolvers/IpMumpsSolverInterface.cpp

    ./configure --with-blas="-lblas -llapack" --with-lapack="-llapack" --enable-shared --prefix=/usr/local --with-mumps-incdir="/usr/include -I/usr/include/mpi" --with-mumps-lib="/usr/lib"
    make -j install
}
update_ipopt () {
    pull_ipopt
    build_ipopt
}
update_pyipopt () {
    cd $SRC_DIR
    git clone https://github.com/pf4d/pyipopt.git
    cd pyipopt
    #sed -i "s#/usr/local#${FENICS_HOME}#g" setup.py
    sed -i "s/coinmumps/dmumps/g" setup.py
    sed -i "s#library_dirs=\[IPOPT_LIB\]#library_dirs=[IPOPT_LIB,'/usr/lib/petsc/lib']#g" setup.py
    python setup.py build
    python setup.py install
}
